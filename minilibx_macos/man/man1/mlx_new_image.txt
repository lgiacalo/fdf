MiniLibX(3)                                                        MiniLibX(3)

NAME
       MiniLibX - Manipulating images

SYNOPSYS:

	void	*mlx_new_image ( void *mlx_ptr, int width, int height );
	char	*mlx_get_data_addr ( void *img_ptr, int *bits_per_pixel, int *size_line,int *endian );
	int	mlx_put_image_to_window ( void *mlx_ptr, void *win_ptr, void  *img_ptr, int x, int y );
	unsigned int	mlx_get_color_value ( void *mlx_ptr, int color );
	void	*mlx_xpm_to_image  (  void  *mlx_ptr,  char  **xpm_data, int *width, int *height );
	void	*mlx_xpm_file_to_image ( void *mlx_ptr, char *filename, int *width,  int *height );
	int	mlx_destroy_image ( void *mlx_ptr, void *img_ptr );



DESCRIPTION:

Mlx_new_image () crée une nouvelle image en mémoire. Il retourne un identifiant void * nécessaire pour manipuler cette image plus tard. Il n'a besoin que de la taille de l'image à créer, en utilisant les paramètres width et height, et l'identifiant de connexion mlx_ptr (voir le manuel mlx).


L'utilisateur peut dessiner à l'intérieur de l'image (voir ci-dessous), et peut vider l'image à l'intérieur d'une fenêtre spécifiée à tout moment pour l'afficher à l'écran. Ceci est fait en utilisantmlx_put_image_to_window (). Trois identificateurs sont nécessaires ici pour la connexion à l'écran, à la fenêtre à utiliser et à l'image (respectivement mlx_ptr, win_ptr et img_ptr). Les coordonnées (x, y) définissent où l'image doit être placée dans la fenêtre.

Mlx_get_data_addr () renvoie des informations sur l'image créée, permettant à un utilisateur de la modifier ultérieurement. Le paramètre img_ptr spécifie l'image à utiliser. Les trois paramètres suivants doivent être les adresses de trois entiers valides différents. Bits_per_pixel sera rempli avec le nombre de bits nécessaires pour représenter une couleur de pixel (également appelée la profondeur de l'image). Size_line est le nombre d'octets utilisés pour stocker une ligne de l'image en mémoire. Ces informations sont nécessaires pour passer d'une ligne à l'autre dans l'image. Endian vous indique si la couleur du pixel dans l'image doit être stockée dans little endian (endian == 0), ou big endian (endian == 1).

       Mlx_get_data_addr renvoie une adresse char * qui représente le début de la zone mémoire dans laquelle l'image est stockée. A partir de cette adresse, les premiers bits bits_per_pixel représentent la couleur du premier pixel dans la première ligne de l'image. Le second groupe de bits_per_pixel représente le second pixel de la première ligne, et ainsi de suite. Ajouter size_line à l'adresse pour obtenir le début de la deuxième ligne. Vous pouvez atteindre tous les pixels de l'image de cette façon.
       Lutilisateur peut dessiner à l'intérieur de l'image (voir ci-dessous), et peut vider l'image à l'intérieur d'une fenêtre spécifiée à tout moment pour l'afficher à l'écran. Cela se fait en utilisant mlx_put_image_to_window (). Trois identifiants sont nécessaires ici pour la connexion à l'écran, la fenêtre à utiliser et l'image (respectivement mlx_ptr, win_ptr et img_ptr). Les coordonnées (x, y) définissent où l'image doit être placée dans la fenêtre.

Mlx_destroy_image détruit l'image donnée (img_ptr).


STOCKAGE DE LA COULEUR DANS LES IMAGES:

       Selon l'affichage, le nombre de bits utilisés pour stocker une couleur de pixel peut changer. L'utilisateur représente habituellement une couleur en mode RVB, en utilisant un octet pour chaque composant (voir le manuel mlx_pixel_put). Cela doit être traduit pour s'adapter à l'exigence bits_per_pixel de l'image, et rendre la couleur compréhensible pour le système graphique. C'est le but de la fonction mlx_get_color_value (). Il prend un paramètre de couleur RGB standard et renvoie une valeur int non signée. Les bits bits les moins significatifs de cette valeur peuvent être stockés dans l'image.

              N'oubliez pas que la position des bits les moins significatifs dépend de l'endian de l'ordinateur local. Si l'endian de l'image (en fait l'endian de l'ordinateur X-Server pour l'affichage X11 distant) diffère de l'endian local, alors la valeur doit être transformée avant d'être utilisée.


XPM IMAGES
       Les fonctions mlx_xpm_to_image () et mlx_xpm_file_to_image () créent une nouvelle image de la même manière. Ils le rempliront en utilisant les xpm_data ou le nom de fichier spécifiés, selon la fonction utilisée. Notez que MiniLibX n'utilise pas la bibliothèque standard Xpm pour traiter les images xpm. Il se peut que vous ne puissiez pas lire tous les types d'images xpm. Il gère toutefois la transparence.


VALEURS DE RETOUR

Les trois fonctions qui créent les images, mlx_new_image (), mlx_xpm_to_image () et mlx_xpm_file_to_image (), renvoient NULL si une erreur se produit. Sinon, ils renvoient un pointeur non null comme identificateur d'image.


VOIR ÉGALEMENT
Mlx (3), mlx_new_window (3), mlx_pixel_put (3), mlx_loop (3)

AUTEUR
Copyright ol @ - 2002-2015 - Olivier Crouzet
19 septembre 2002 MiniLibX (3)
			   						 (FIN)

